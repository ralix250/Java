Notas Java

James Gosling: Escribelo 1 vez y ejecutalo donde quieras.
   1. Introducción
      https://www.oracle.com/mx/java/technologies/downloads/
      Instalar Java, agregar variable de entorno(JAVA_HOME) y variable PATH(ruta donde esta instalado el jdk)
      https://www.jetbrains.com/idea/
      Instalar IntelliJ IDEA
      ### Origen y desarrollo de Java  
      Java fue desarrollado por **Sun Microsystems** en **1995**, aunque su origen se remonta a **1991**, cuando un equipo de 13 personas liderado por **James Gosling** inició el **Proyecto Verde** (Green Project).
      Buscaba crear un lenguaje para desarrollar aplicaciones para tarjetas inteligentes y decodificadores de TV. 
      Inicialmente, usaron el lenguaje **C++**, pero los problemas con punteros y gestión de memoria llevaron a la necesidad de desarrollar un nuevo lenguaje desde cero.
      El primer nombre del lenguaje fue **Oak** (Roble), en honor al árbol que James Gosling veía desde su ventana. 
      Sin embargo, por temas de licencias tuvieron que cambiar el nombre a **Java**, inspirado en una cafetería frecuentada por el equipo, ubicada en la isla de Java, Indonesia.  
      ### Lanzamiento oficial  
      - **1995**: Primera versión oficial del lenguaje.  
      - **1996**: Lanzamiento oficial ante la prensa y creación de un navegador que permitía ejecutar pequeños programas llamados **applets** en páginas web (hoy obsoletos).  
      - **1998-1999**: Nace **Java Enterprise Edition (JEE)**, enfocado en el desarrollo de aplicaciones empresariales y dinámicas.  
      ### Filosofía y características principales de Java  
      La visión de Gosling era desarrollar un lenguaje **multiplataforma**, cuyo lema era: *"Escríbelo una vez, ejecútalo en cualquier lugar"*. 
      Esta independencia se logra gracias a la **Máquina Virtual de Java (JVM)**, que permite que los binarios compilados (bytecode) puedan ejecutarse en diferentes sistemas operativos (Linux, Windows, macOS).  
      Cada sistema operativo tiene su propia JVM, lo que hace posible la ejecución del bytecode sin importar la plataforma.  
      ## Características clave de Java  
      1. **Multiplataforma**: Las aplicaciones se compilan en **bytecode**, un lenguaje intermedio que la JVM convierte en binario para ser interpretado por el hardware.  
      2. **Orientación a objetos**: Java sigue los principios de la **Programación Orientada a Objetos (POO)**, incluyendo:  
         - **Polimorfismo**: Clases que pueden adoptar múltiples formas mediante la herencia.  
         - **Encapsulamiento**: Permite ocultar información interna de las clases.  
         - **Herencia**: Reutilización de atributos y métodos de una clase padre en otras clases.  
         - **Interfaces**: Especifican un contrato que las clases deben seguir.  
         - **Sobrecarga y sobrescritura de métodos**: Dos formas de implementar métodos con el mismo nombre pero diferentes comportamientos.  
      3. **Recolección automática de basura**: Un proceso de bajo nivel que libera memoria eliminando objetos que ya no se usan, evitando fugas de memoria.  
      4. **Modularidad**: Las aplicaciones grandes se desarrollan a partir de módulos más pequeños, lo que facilita la escritura, mantenimiento y escalabilidad del código.  
      5. **Fuertemente tipado**: Cada variable debe tener un tipo de dato definido, lo que garantiza mayor seguridad y control durante la ejecución.  
      6. **Desarrollo para múltiples entornos**:  
         - Aplicaciones de consola y scripts.  
         - Aplicaciones de escritorio con **Swing** y **JavaFX**.  
         - Aplicaciones web dinámicas con **Java Enterprise Edition (JEE)**.  
         - **APIs REST** para arquitecturas en la nube y microservicios.  
         - Frameworks populares como **Spring Boot** para desarrollo empresarial.
      ## Resumen  
      Java es un lenguaje versátil y poderoso que ha evolucionado desde sus orígenes para ser uno de los más utilizados en la industria. Desde aplicaciones de escritorio hasta sistemas distribuidos y arquitecturas en la nube, Java sigue siendo una opción robusta y relevante para desarrolladores en todo el mundo.  

   Primer Proyecto
      https://www.jetbrains.com/help/idea/creating-and-running-your-first-java-application.html
      https://www.jetbrains.com/help/idea/new-project-wizard.html
      Configuración inicial y realizar ejercicios.

   2. Variables
   3. Tipo String: Cadenas
   4. Operadores
   5. Flujos de control
   6. Clases Wrapper
   7. Valor v/S referencia
   8. Las clases Date y Calendar
   9. Clase System
   10. La Clase Math
   11. Linea de comando
   12. Arreglos
   13. Matrices: Arreglos bidimensionales
   14. Programación orientada a objetos: Clases y objetos
   15. Programación orientada a objetos: Paquetes
   16. Programación orientada a objetos: Ejemplo Facturas
   17. Programación orientada a objetos: Sobrecarga de métodos
   18. Programación orientada a objetos: Herencia
   19. Programación orientada a objetos: Herencia y clases Abstractas
   20. Programación orientada a objetos: Interfaces
   21. Programación orientada a objetos: Ejemplo interface Repositorio
   22. Tipos Genéricos (Java Generics)
   23. Manejo de Excepciones
   24. Estructura de Datos: API de Colección de Java
   25. Threads: Hilos y Concurrencia
   26. Java 8 Programación Funcional: Expresiones Lambda
   27. Java 8 Programación Funcional: API Stream
   28. Java 8 Programación Funcional: Optional
   29. Java 8 Date Time
   30. Java Annotations: Uso de Anotaciones
   31. Recursividad
   32. Manejo de Archivos
   34. Bases de datos con JDBC
   35. Bases de datos con JDBC: Pool de conexiones
   36. Bases de datos con JDBC: Transacciones
   37. Unit Testing: JUnit 5
   38. Unit Testing: Mockito


Recursos Alternos:
   Youtube:
      https://www.youtube.com/@ProgramandoConElNovato
      https://youtu.be/2ZXiuh0rg3M?si=lH38v7V0C28GSmuM