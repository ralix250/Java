Notas Java

James Gosling: Escribelo 1 vez y ejecutalo donde quieras.
   1. Introducción
      https://www.oracle.com/mx/java/technologies/downloads/
      Instalar Java, agregar variable de entorno(JAVA_HOME) y variable PATH(ruta donde esta instalado el jdk)
      https://www.jetbrains.com/idea/
      Instalar IntelliJ IDEA
      ### Origen y desarrollo de Java
      Java fue desarrollado por **Sun Microsystems** en **1995**, aunque su origen se remonta a **1991**, cuando un equipo de 13 personas liderado por **James Gosling** inició el **Proyecto Verde** (Green Project).
      Buscaba crear un lenguaje para desarrollar aplicaciones para tarjetas inteligentes y decodificadores de TV.
      Inicialmente, usaron el lenguaje **C++**, pero los problemas con punteros y gestión de memoria llevaron a la necesidad de desarrollar un nuevo lenguaje desde cero.
      El primer nombre del lenguaje fue **Oak** (Roble), en honor al árbol que James Gosling veía desde su ventana.
      Sin embargo, por temas de licencias tuvieron que cambiar el nombre a **Java**, inspirado en una cafetería frecuentada por el equipo, ubicada en la isla de Java, Indonesia.
      ### Lanzamiento oficial
      - **1995**: Primera versión oficial del lenguaje.
      - **1996**: Lanzamiento oficial ante la prensa y creación de un navegador que permitía ejecutar pequeños programas llamados **applets** en páginas web (hoy obsoletos).
      - **1998-1999**: Nace **Java Enterprise Edition (JEE)**, enfocado en el desarrollo de aplicaciones empresariales y dinámicas.
      ### Filosofía y características principales de Java
      La visión de Gosling era desarrollar un lenguaje **multiplataforma**, cuyo lema era: *"Escríbelo una vez, ejecútalo en cualquier lugar"*.
      Esta independencia se logra gracias a la **Máquina Virtual de Java (JVM)**, que permite que los binarios compilados (bytecode) puedan ejecutarse en diferentes sistemas operativos (Linux, Windows, macOS).
      Cada sistema operativo tiene su propia JVM, lo que hace posible la ejecución del bytecode sin importar la plataforma.
      ## Características clave de Java
      1. **Multiplataforma**: Las aplicaciones se compilan en **bytecode**, un lenguaje intermedio que la JVM convierte en binario para ser interpretado por el hardware.
      2. **Orientación a objetos**: Java sigue los principios de la **Programación Orientada a Objetos (POO)**, incluyendo:
         - **Polimorfismo**: Clases que pueden adoptar múltiples formas mediante la herencia.
         - **Encapsulamiento**: Permite ocultar información interna de las clases.
         - **Herencia**: Reutilización de atributos y métodos de una clase padre en otras clases.
         - **Interfaces**: Especifican un contrato que las clases deben seguir.
         - **Sobrecarga y sobrescritura de métodos**: Dos formas de implementar métodos con el mismo nombre pero diferentes comportamientos.
      3. **Recolección automática de basura**: Un proceso de bajo nivel que libera memoria eliminando objetos que ya no se usan, evitando fugas de memoria.
      4. **Modularidad**: Las aplicaciones grandes se desarrollan a partir de módulos más pequeños, lo que facilita la escritura, mantenimiento y escalabilidad del código.
      5. **Fuertemente tipado**: Cada variable debe tener un tipo de dato definido, lo que garantiza mayor seguridad y control durante la ejecución.
      6. **Desarrollo para múltiples entornos**:
         - Aplicaciones de consola y scripts.
         - Aplicaciones de escritorio con **Swing** y **JavaFX**.
         - Aplicaciones web dinámicas con **Java Enterprise Edition (JEE)**.
         - **APIs REST** para arquitecturas en la nube y microservicios.
         - Frameworks populares como **Spring Boot** para desarrollo empresarial.
      ## Resumen
      Java es un lenguaje versátil y poderoso que ha evolucionado desde sus orígenes para ser uno de los más utilizados en la industria. Desde aplicaciones de escritorio hasta sistemas distribuidos y arquitecturas en la nube, Java sigue siendo una opción robusta y relevante para desarrolladores en todo el mundo.

   Primer Proyecto
      https://www.jetbrains.com/help/idea/creating-and-running-your-first-java-application.html
      https://www.jetbrains.com/help/idea/new-project-wizard.html
      Configuración inicial y realizar ejercicios.

   2. Variables
      ### **1. Introducción a las variables**
      Una variable es un espacio en memoria donde se almacena un dato que puede cambiar durante la ejecución del programa.
      En Java, todas las variables deben declararse con un tipo específico, lo que garantiza la seguridad del tipo de dato.

      ### **2. Ejemplos de variables**
      - **int**: `int edad = 25;`
      - **double**: `double salario = 45678.90;`
      - **char**: `char inicial = 'A';`
      - **boolean**: `boolean esActivo = true;`

      ### **3. Reglas para definir una variable**
      - Debe comenzar con una letra, `$` o `_`.
      - No puede usar palabras reservadas como `int`, `public`.
      - Es sensible a mayúsculas y minúsculas (`Edad` es diferente de `edad`).
      - No se permiten espacios ni caracteres especiales.

      ### **4. Introducción a los primitivos**
      Java tiene 8 tipos de datos primitivos que almacenan valores simples, como números, caracteres o valores booleanos.
      No son objetos, por lo que tienen mejor rendimiento.

      ### **5. Primitivos numéricos enteros**
      - **byte** (8 bits): Rango: -128 a 127.
      - **short** (16 bits): Rango: -32,768 a 32,767.
      - **int** (32 bits): Rango: -2³¹ a 2³¹ - 1.
      - **long** (64 bits): Rango: -2⁶³ a 2⁶³ - 1.

      ### **6. Primitivos numéricos de punto flotante**
      Se utilizan para almacenar números decimales:
      - **float** (32 bits): Precisión simple.
      - **double** (64 bits): Precisión doble.

      ### **7. Primitivos de punto flotante y sus constantes**
      - **Float.MAX_VALUE**: Máximo valor de `float`.
      - **Double.MAX_VALUE**: Máximo valor de `double`.
      - También existen las constantes `NaN` (Not a Number) y `Infinity`.

      ### **8. Primitivo char o carácter**
      Almacena un único carácter Unicode.

      ### **9. Char y caracteres especiales**
      Caracteres especiales:
      - **'\n'**: Nueva línea
      - **'\t'**: Tabulación
      - **'\\'**: Barra invertida

      ### **10. Primitivo boolean o lógico binario**
      Almacena valores `true` o `false`.

      ### **11. Sistemas numéricos: decimal, binario, octal y hexadecimal**
      - **Decimal**: Base 10 (0-9)
      - **Binario**: Base 2 (0,1)
      - **Octal**: Base 8 (0-7)
      - **Hexadecimal**: Base 16 (0-9, A-F)

      ### **12. Sistemas numéricos y entradas desde ventana de diálogo**
      **Ejemplo:**
      import javax.swing.JOptionPane;

      String input = JOptionPane.showInputDialog("Ingresa un número:");
      int numero = Integer.parseInt(input);

      ### **13. Sistemas numéricos y entradas desde terminal**
      **Ejemplo:**
      import java.util.Scanner;

      Scanner scanner = new Scanner(System.in);
      System.out.print("Ingresa un número: ");
      int numero = scanner.nextInt();

      ### **14. Conversión de cadenas a primitivos**
      Se usa la clase `Wrapper` para convertir:
      - `Integer.parseInt()` para convertir a `int`.
      - `Double.parseDouble()` para convertir a `double`.

      ### **15. Conversiones entre tipos primitivos**
      Java permite conversiones entre tipos primitivos de dos maneras:

      - **Conversión implícita** (automática):
      int num = 10;
      double resultado = num;  // int se convierte en double
      - **Conversión explícita** (casting):
      double valor = 9.7;
      int entero = (int) valor;  // Se pierde la parte decimal

   3. Tipo String: Cadenas
      ### **Clase `String` en Java**
      La clase `String` en Java representa una secuencia de caracteres y es inmutable, lo que significa que una vez creada, no puede cambiar. Cualquier operación que modifique una cadena genera un nuevo `String` en memoria.

      #### **Creación de un `String`**
      Hay dos formas principales de crear un `String` en Java:
      1. **Literal**: `"cadena"` — Java almacena las cadenas literales en un "pool de strings" para optimizar la memoria.
         String nombre = "Andrés";

      2. **Usando el operador `new`**: se crea un nuevo objeto `String`, no almacenado en el pool.
         String nombre = new String("Andrés");
      Aunque ambas formas son válidas, se recomienda la primera por su simplicidad y eficiencia.

      #### **Características principales de `String`**
      - **Inmutabilidad**: Al ser inmutables, cualquier operación sobre un `String` (como cambiar su contenido) genera un nuevo objeto `String`.
      - **Secuencia de caracteres**: `String` es una secuencia de caracteres Unicode, lo que permite representar textos en múltiples lenguajes.
      - **No es un tipo primitivo**: Aunque se usa de forma similar a los tipos primitivos, `String` es un objeto.

      #### **Escapar caracteres**
      Para incluir comillas o caracteres especiales dentro de un `String`, se usa el carácter de escape `\`.
         String texto = "Ella dijo, \"Hola\"";

      ### **Métodos principales de la clase `String`**
         #### 1. **Comparación de cadenas**
         - **equals()**: Compara el contenido de dos `String` y retorna `true` si son iguales.
           String s1 = "hola";
           String s2 = new String("hola");
           boolean iguales = s1.equals(s2); // true
         - **equalsIgnoreCase()**: Similar a `equals()`, pero ignora las mayúsculas y minúsculas.
           boolean iguales = s1.equalsIgnoreCase(s2); // true
         - **compareTo()**: Compara lexicográficamente dos cadenas. Devuelve un valor:
           - Negativo si el primero es menor.
           - Cero si son iguales.
           - Positivo si el primero es mayor.
           int resultado = s1.compareTo(s2);

         #### 2. **Manipulación de contenido**
            - **concat()**: Une dos `String`.
               String completo = s1.concat(s2);
            - También se puede usar el operador `+` para concatenar.

            - **substring(int beginIndex, int endIndex)**: Extrae una subcadena desde `beginIndex` hasta `endIndex` (exclusivo).
               String subcadena = s1.substring(1, 3); // "ol"

            - **replace()**: Reemplaza caracteres o cadenas dentro del `String`.
               String nuevaCadena = s1.replace('h', 'j'); // "jola"

         #### 3. **Buscar contenido**
         - **indexOf()**: Encuentra la primera aparición de un carácter o `String`. Retorna `-1` si no encuentra el valor.
            int posicion = s1.indexOf("a"); // 1
         - **lastIndexOf()**: Encuentra la última aparición de un carácter o `String`.
            int ultimaPosicion = s1.lastIndexOf("a");

         #### 4. **Métodos para verificar contenido**
         - **startsWith()** y **endsWith()**: Verifican si un `String` comienza o termina con cierto prefijo o sufijo.
           boolean empiezaCon = s1.startsWith("ho"); // true
           boolean terminaCon = s1.endsWith("la");   // true

         #### 5. **Otras operaciones útiles**
         - **length()**: Devuelve el número de caracteres en el `String`.
            int longitud = s1.length();
         - **isEmpty()**: Retorna `true` si el `String` está vacío (`length() == 0`).
            boolean vacio = s1.isEmpty();
         - **trim()**: Elimina los espacios al inicio y al final de la cadena.
            String sinEspacios = s1.trim();
         - **charAt(int index)**: Obtiene el carácter en una posición específica.
            char c = s1.charAt(1); // 'o'

         #### 6. **Convertir `String` a otros tipos**
         - **toCharArray()**: Convierte el `String` en un arreglo de caracteres.
            char[] caracteres = s1.toCharArray();
         - **split(String regex)**: Divide el `String` en un arreglo de subcadenas según el patrón de regex.
            String[] partes = s1.split(" ");

         #### 7. **Conversiones de mayúsculas y minúsculas**
         - **toUpperCase()**: Convierte todos los caracteres a mayúsculas.
            String enMayusculas = s1.toUpperCase();
         - **toLowerCase()**: Convierte todos los caracteres a minúsculas.
            String enMinusculas = s1.toLowerCase();

      ### **Ejemplo completo usando los métodos principales**
         public class EjemploString {
            public static void main(String[] args) {
               // Crear strings
               String saludo = "Hola";
               String nombre = "Andrés";
               String completo = saludo + " " + nombre;

               // Comparación
               boolean esIgual = saludo.equals("hola"); // false
               boolean esIgualIgnoreCase = saludo.equalsIgnoreCase("hola"); // true

               // Longitud y caracter en posición
               int longitud = completo.length();
               char primerCaracter = completo.charAt(0); // 'H'

               // Substring y reemplazo
               String subcadena = completo.substring(5); // "Andrés"
               String reemplazo = completo.replace("Hola", "Bienvenido"); // "Bienvenido Andrés"

               // Transformaciones
               String enMayusculas = completo.toUpperCase(); // "HOLA ANDRÉS"
               String enMinusculas = completo.toLowerCase(); // "hola andrés"
               String sinEspacios = "   espacio   ".trim(); // "espacio"

               // Dividir y concatenar
               String[] partes = completo.split(" ");
               String nombreCompleto = partes[0].concat(" " + partes[1]);

               // Imprimir resultados
               System.out.println("Original: " + completo);
               System.out.println("Es igual (ignore case): " + esIgualIgnoreCase);
               System.out.println("Longitud: " + longitud);
               System.out.println("Reemplazo: " + reemplazo);
               System.out.println("Subcadena: " + subcadena);
               System.out.println("Mayúsculas: " + enMayusculas);
               System.out.println("Sin espacios: " + sinEspacios);
            }
         }

   4. Operadores
   ## Operadores en Java
   Los operadores en Java se utilizan para realizar cálculos matemáticos, evaluar condiciones y manipular datos de manera eficiente. Aquí explicaremos los tipos de operadores principales y su uso.

   ### 1. Operadores Aritméticos
   Estos operadores permiten realizar operaciones matemáticas con tipos de datos numéricos primitivos (`int`, `double`, etc.) y con sus clases envolventes, como `Integer`.
   Los operadores más comunes son:
      - **Suma (+)**: Realiza la adición de valores.
      - **Resta (-)**: Resta un valor de otro.
      - **Multiplicación (*)**: Multiplica valores.
      - **División (/)**: Divide el primer valor entre el segundo.
      - **Módulo (%)**: Devuelve el resto de la división entera.
   También tenemos los operadores de **incremento** (`++`) y **decremento** (`--`), que aumentan o disminuyen el valor de una variable en 1.
      Estos pueden colocarse antes o después de la variable, lo que define si se aplica antes o después de evaluar la expresión.

   #### Autoboxing y Unboxing
   Java permite usar operadores aritméticos con clases envolventes (como `Integer`).
   La conversión entre tipos primitivos y sus clases envolventes ocurre automáticamente, en un proceso llamado **autoboxing** (primitivo a envolvente) y
      **unboxing** (envolvente a primitivo).

   ### 2. Operadores de Asignación y Operadores Combinados
   El operador de asignación (`=`) se utiliza para asignar valores a una variable.
   Existen operadores de asignación combinados que permiten realizar y asignar una operación en una sola línea:
      - **+=**: Suma y asigna el resultado.
      - **-=**: Resta y asigna el resultado.
      - **/=**: Divide y asigna el resultado.
      - **%=**: Aplica módulo y asigna el resultado.
   Por ejemplo, `a += 5;` es equivalente a `a = a + 5;`.

   ### 3. Operadores Incremento y Decremento
   Estos operadores incrementan o decrementan el valor de una variable en 1.
   - **Pre-incremento y pre-decremento** (`++a` y `--a`): Primero se modifica el valor y luego se usa en la expresión.
   - **Post-incremento y post-decremento** (`a++` y `a--`): Primero se usa el valor actual en la expresión y luego se modifica.

   ### 4. Operador Ternario
   El operador ternario `?:` es una forma abreviada de una expresión `if-else` y permite asignar un valor según una condición. Su estructura es:
   Por ejemplo:
      resultado = (condición) ? valor_si_true : valor_si_false;
      int max = (a > b) ? a : b;

   ### 5. Operadores Relacionales
   Los operadores relacionales comparan valores numéricos o variables y devuelven un resultado booleano (`true` o `false`):
      - **==**: Igualdad.
      - **!=**: Desigualdad.
      - **>**: Mayor que.
      - **>=**: Mayor o igual que.
      - **<**: Menor que.
      - **<=**: Menor o igual que.
   Estos operadores se usan en sentencias de control, como `if`, `while`, y `for`.

   ### 6. Operadores Lógicos
   Los operadores lógicos permiten evaluar expresiones booleanas:
   - **&& (AND lógico)**: La expresión es `true` si ambas partes son verdaderas.
   - **|| (OR lógico)**: La expresión es `true` si al menos una de las partes es verdadera.
   - **! (NOT lógico)**: Niega el valor booleano, convirtiendo `true` en `false` y viceversa.

   #### Comparación de Objetos y Primitivos
   Los operadores relacionales (`==`, `!=`) comparan valores en tipos primitivos. En objetos, estos operadores comparan
      referencias (si apuntan al mismo objeto en memoria). Para comparar valores de objetos, se usa el método `.equals()`.

   ### 7. Operadores Bit a Bit
   Los operadores bit a bit (`&`, `|`, `^`, `~`, `<<`, `>>`, `>>>`) manipulan los bits individuales en tipos numéricos y se usan
      principalmente en programación de bajo nivel.

   ### 8. Precedencia de Operadores
   La **precedencia** define el orden en que los operadores se evalúan en una expresión. Desde mayor a menor precedencia:
      1. **Paréntesis**: `( )`
      2. **Incremento/Decremento**: `++`, `--` (pre/post)
      3. **Aritméticos**: `*`, `/`, `%`, `+`, `-`
      4. **Relacionales**: `>`, `>=`, `<`, `<=`
      5. **Igualdad/Desigualdad**: `==`, `!=`
      6. **Lógicos**: `&&`, `||`
      7. **Asignación**: `=`, `+=`, `-=`, `*=`, `/=`
   Este orden puede modificarse usando paréntesis para agrupar expresiones y dar prioridad a ciertas operaciones.


Espero que esta versión te sea clara y útil para tus notas sobre operadores en Java. ¡Avísame si necesitas que amplíe algún tema!
   5. Flujos de control
   6. Clases Wrapper
   7. Valor v/S referencia
   8. Las clases Date y Calendar
   9. Clase System
   10. La Clase Math
   11. Linea de comando
   12. Arreglos
   13. Matrices: Arreglos bidimensionales
   14. Programación orientada a objetos: Clases y objetos
   15. Programación orientada a objetos: Paquetes
   16. Programación orientada a objetos: Ejemplo Facturas
   17. Programación orientada a objetos: Sobrecarga de métodos
   18. Programación orientada a objetos: Herencia
   19. Programación orientada a objetos: Herencia y clases Abstractas
   20. Programación orientada a objetos: Interfaces
   21. Programación orientada a objetos: Ejemplo interface Repositorio
   22. Tipos Genéricos (Java Generics)
   23. Manejo de Excepciones
   24. Estructura de Datos: API de Colección de Java
   25. Threads: Hilos y Concurrencia
   26. Java 8 Programación Funcional: Expresiones Lambda
   27. Java 8 Programación Funcional: API Stream
   28. Java 8 Programación Funcional: Optional
   29. Java 8 Date Time
   30. Java Annotations: Uso de Anotaciones
   31. Recursividad
   32. Manejo de Archivos
   34. Bases de datos con JDBC
   35. Bases de datos con JDBC: Pool de conexiones
   36. Bases de datos con JDBC: Transacciones
   37. Unit Testing: JUnit 5
   38. Unit Testing: Mockito


Recursos Alternos:
   Youtube:
      https://www.youtube.com/@ProgramandoConElNovato
      https://youtu.be/2ZXiuh0rg3M?si=lH38v7V0C28GSmuM
